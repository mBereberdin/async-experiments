//
//  Measure.swift
//  AsyncExperiments
//
//  Created by Mikhail Bereberdin on 19.09.2024.
//

import Foundation

/// –ò–∑–º–µ—Ä–µ–Ω–∏–µ.
public struct Measure {
    
    // MARK: - Templates
    
    /// –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è.
    private static let START_MESSAGE_TEMPLATE: String = "üü¢ Starting execute [%@]."
    
    /// –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    private static let STOP_MESSAGE_TEMPLATE: String = "üî¥ Stoped execute [%@]."
    
    /// –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    private static let TIME_MESSAGE_TEMPLATE: String = "‚ö™Ô∏è üè∑Ô∏è %-70s ‚è±Ô∏è %7.4fs. ‚è∏Ô∏è %5@ üß© %@\n"
    
    // MARK: - Methods
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–µ–Ω–∏—è.
    /// - Parameters:
    ///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–æ–¥–∞).
    ///   - code: –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    public static func time(message: String, logStates: Bool = true, code: () async -> ()) async {
        if logStates {
            print(String(format: START_MESSAGE_TEMPLATE, message))
        }
        
        let startTime = CFAbsoluteTimeGetCurrent()
        await code()
        let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
        
        if logStates {
            print(String(format: STOP_MESSAGE_TEMPLATE, message))
        }
        
        print(String(format: TIME_MESSAGE_TEMPLATE,
                     (message as NSString).utf8String ?? "null",
                     timeElapsed,
                     EnvironmentVariables.SIMULATE_DELAY.description,
                     EnvironmentVariables.nums.count.formatted(.number)))
    }
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–µ–Ω–∏—è.
    /// - Parameters:
    ///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–æ–¥–∞).
    ///   - code: –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    public static func time<TResult>(message: String, logStates: Bool = true, code: () async -> TResult) async -> TResult {
        if logStates {
            print(String(format: START_MESSAGE_TEMPLATE, message))
        }
        
        let startTime = CFAbsoluteTimeGetCurrent()
        let result = await code()
        let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
        
        if logStates {
            print(String(format: STOP_MESSAGE_TEMPLATE, message))
        }
        
        print(String(format: TIME_MESSAGE_TEMPLATE,
                     (message as NSString).utf8String ?? "null",
                     timeElapsed,
                     EnvironmentVariables.SIMULATE_DELAY.description,
                     EnvironmentVariables.nums.count.formatted(.number)))
        
        return result
    }
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–µ–Ω–∏—è.
    /// - Parameters:
    ///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–æ–¥–∞).
    ///   - code: –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    public static func time<TResult>(message: String, logStates: Bool = true, code: () -> TResult) -> TResult {
        if logStates {
            print(String(format: START_MESSAGE_TEMPLATE, message))
        }
        
        let startTime = CFAbsoluteTimeGetCurrent()
        let result = code()
        let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
        
        if logStates {
            print(String(format: STOP_MESSAGE_TEMPLATE, message))
        }
        
        print(String(format: TIME_MESSAGE_TEMPLATE,
                     (message as NSString).utf8String ?? "null",
                     timeElapsed,
                     EnvironmentVariables.SIMULATE_DELAY.description,
                     EnvironmentVariables.nums.count.formatted(.number)))
        
        return result
    }
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–µ–Ω–∏—è.
    /// - Parameters:
    ///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–æ–¥–∞).
    ///   - code: –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    public static func time(message: String, logStates: Bool = true, code: () async throws -> ()) async throws {
        if logStates {
            print(String(format: START_MESSAGE_TEMPLATE, message))
        }
        
        let startTime = CFAbsoluteTimeGetCurrent()
        try await code()
        let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
        
        if logStates {
            print(String(format: STOP_MESSAGE_TEMPLATE, message))
        }
        
        print(String(format: TIME_MESSAGE_TEMPLATE,
                     (message as NSString).utf8String ?? "null",
                     timeElapsed,
                     EnvironmentVariables.SIMULATE_DELAY.description,
                     EnvironmentVariables.nums.count.formatted(.number)))
    }
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–µ–Ω–∏—è.
    /// - Parameters:
    ///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–æ–¥–∞).
    ///   - code: –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    public static func time<TResult>(message: String, logStates: Bool = true, code: () async throws -> TResult) async throws -> TResult {
        if logStates {
            print(String(format: START_MESSAGE_TEMPLATE, message))
        }
        
        let startTime = CFAbsoluteTimeGetCurrent()
        let result = try await code()
        let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
        
        if logStates {
            print(String(format: STOP_MESSAGE_TEMPLATE, message))
        }
        
        print(String(format: TIME_MESSAGE_TEMPLATE,
                     (message as NSString).utf8String ?? "null",
                     timeElapsed,
                     EnvironmentVariables.SIMULATE_DELAY.description,
                     EnvironmentVariables.nums.count.formatted(.number)))
        
        return result
    }
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–µ–Ω–∏—è.
    /// - Parameters:
    ///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–æ–¥–∞).
    ///   - code: –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    public static func time(message: String, logStates: Bool = true, code: () throws -> ()) throws {
        if logStates {
            print(String(format: START_MESSAGE_TEMPLATE, message))
        }
        
        let startTime = CFAbsoluteTimeGetCurrent()
        try code()
        let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
        
        if logStates {
            print(String(format: STOP_MESSAGE_TEMPLATE, message))
        }
        
        print(String(format: TIME_MESSAGE_TEMPLATE,
                     (message as NSString).utf8String ?? "null",
                     timeElapsed,
                     EnvironmentVariables.SIMULATE_DELAY.description,
                     EnvironmentVariables.nums.count.formatted(.number)))
    }
    
    /// –ò–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–µ–Ω–∏—è.
    /// - Parameters:
    ///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–æ–¥–∞).
    ///   - code: –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    public static func time<TResult>(message: String, logStates: Bool = true, code: () throws -> TResult) throws -> TResult {
        if logStates {
            print(String(format: START_MESSAGE_TEMPLATE, message))
        }
        
        let startTime = CFAbsoluteTimeGetCurrent()
        let result = try code()
        let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
        
        if logStates {
            print(String(format: STOP_MESSAGE_TEMPLATE, message))
        }
        
        print(String(format: TIME_MESSAGE_TEMPLATE,
                     (message as NSString).utf8String ?? "null",
                     timeElapsed,
                     EnvironmentVariables.SIMULATE_DELAY.description,
                     EnvironmentVariables.nums.count.formatted(.number)))
        
        return result
    }
}
